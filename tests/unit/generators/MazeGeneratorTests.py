import unittest

from parameterized import parameterized

from src.Maze import MazeConfig
from src.generators.DFSGenerator import DFSGenerator
from src.generators.MazeGenerator import MazeGenerator
from src.generators.SpanningTreeGenerator import SpanningTreeGenerator
from src.solvers.BFSMazeSolver import BFSMazeSolver, UnsolvableMazeException

generators_for_testing = [DFSGenerator(), SpanningTreeGenerator()]


class MazeGeneratorTests(unittest.TestCase):
    def setUp(self):
        self.config = MazeConfig(10, 15)

    @parameterized.expand(generators_for_testing)
    def test_it_generate_valid_maze(self, generator: MazeGenerator):
        maze = generator.generate(self.config)

        self.assertTrue(maze.is_correct())

    @parameterized.expand(generators_for_testing)
    def test_there_is_solution_in_generated_maze(self, generator: MazeGenerator):
        # we generate many mazes because they are random
        for i in range(100):
            maze = generator.generate(self.config)

            # we assume that maze solver is already tested
            try:
                BFSMazeSolver.solve(maze)
            except UnsolvableMazeException:
                self.fail("Maze generated by generator doesn't have any solution.")
